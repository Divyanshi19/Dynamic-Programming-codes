#include<iostream>
#include<cstring>
using namespace std;
int dp[1001][1001];
int max(int a, int b)
{
    if(a > b)
        return a;
    else
        return b;
}
int knapsack(int wt[], int val[], int W, int n)
{
    if(n == 0 || W == 0)
        return 0;
    if(dp[n][W] != -1)
        return dp[n][W];
    if(wt[n-1] <= W)
        return dp[n][W] = max(val[n-1] + knapsack(wt,val,W-wt[n-1],n-1),knapsack(wt,val,W,n-1));
    else
        return dp[n][W] = knapsack(wt,val,W,n-1);
}
int main()
{
    int t,n,W;
    cin >> t;
    while(t--)
    {
        memset(dp,-1,sizeof(dp));
        cin >> n >> W;
        int wt[n],val[n];
        for(int i = 0; i < n; ++i)
        {
            cin >> val[i];
        }
        for(int i = 0; i < n; ++i)
        {
            cin >> wt[i];
        }
        int max_value = knapsack(wt,val,W,n);
        cout<<max_value<<"\n";
    }
}